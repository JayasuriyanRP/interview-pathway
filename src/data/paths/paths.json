[
  {
    "id": "example-path",
    "title": "Example Path with All Content Types",
    "description": "This path demonstrates all content types available in the app, including text, code, lists, tables, images, quotes, and notes.",
    "icon": "FileText",
    "level": "Beginner"
  },
  {
    "id": "frontend",
    "title": "Frontend Development",
    "description": "Master essential frontend interview questions covering HTML, CSS, JavaScript, and popular frameworks.",
    "icon": "Monitor",
    "level": "Intermediate",
    "subpaths": [
      {
        "id": "frontend-html",
        "title": "HTML",
        "description": "HTML interview questions and answers",
        "level": "Intermediate"
      },
      {
        "id": "css-basics",
        "title": "CSS Basics",
        "description": "Basic CSS concepts, syntax, and common interview questions",
        "level": "Beginner"
      },
      {
        "id": "sass-basics",
        "title": "SASS Basics",
        "description": "Introduction to SASS (Syntactically Awesome Style Sheets) and basic SASS syntax and features",
        "level": "Beginner"
      },
      {
        "id": "responsive-design-basics",
        "title": "Responsive Design Basics",
        "description": "Basic concepts of responsive design, including layout techniques and strategies",
        "level": "Beginner"
      },
      {
        "id": "css-media-queries-basics",
        "title": "CSS Media Queries Basics",
        "description": "Introduction to CSS Media Queries for creating responsive web designs",
        "level": "Beginner"
      },
      {
        "id": "frontend-react",
        "title": "React",
        "description": "React framework interview questions and answers",
        "level": "Intermediate",
        "subpaths": [
          {
            "id": "react-basic",
            "title": "React Basics",
            "description": "React Basics",
            "level": "Beginner"
          },
          {
            "id": "react-hooks",
            "title": "React Hooks",
            "description": "Understanding React hooks and their applications",
            "level": "Intermediate"
          },
          {
            "id": "react-state-management",
            "title": "React State Management",
            "description": "Various state management approaches in React",
            "level": "Advanced"
          },
          {
            "id": "react-patterns",
            "title": "Design Patterns",
            "description": "Common React design patterns and best practices",
            "level": "Advanced"
          },
          {
            "id": "react-syntaxes",
            "title": "React Syntaxes",
            "description": "Common React syntax patterns and related interview questions",
            "level": "Beginner"
          }
        ]
      },
      {
        "id": "frontend-angular",
        "title": "Angular",
        "description": "Angular framework interview questions and answers",
        "level": "Intermediate",
        "subpaths": [
          {
            "id": "angular-basics",
            "title": "Angular Basics",
            "description": "Fundamental Angular concepts and common interview questions",
            "level": "Beginner"
          },
          {
            "id": "angular-intermediate",
            "title": "Angular Intermediate",
            "description": "Intermediate Angular interview questions to deepen your understanding",
            "level": "Intermediate"
          },
          {
            "id": "angular-advanced",
            "title": "Angular Advanced",
            "description": "Advanced Angular interview topics for experienced developers",
            "level": "Advanced"
          },
          {
            "id": "angular-17",
            "title": "Angular 17",
            "description": "Interview questions focused on Angular 17's latest features and improvements",
            "level": "Intermediate"
          },
          {
            "id": "angular-lifecycle-hooks",
            "title": "Angular Lifecycle Hooks",
            "description": "Understand and answer questions about Angular component lifecycle hooks",
            "level": "Intermediate"
          },
          {
            "id": "angular-api-integration",
            "title": "Angular API Integration",
            "description": "Interview questions on integrating RESTful APIs with Angular",
            "level": "Intermediate"
          },
          {
            "id": "angular-middlwares-interceptors",
            "title": "Angular Middlewares & Interceptors",
            "description": "Middleware and HTTP interceptor patterns in Angular",
            "level": "Intermediate"
          },
          {
            "id": "angular-performance",
            "title": "Angular Performance",
            "description": "Performance optimization techniques and interview scenarios",
            "level": "Advanced"
          },
          {
            "id": "angular-rxjs",
            "title": "Angular & RxJS",
            "description": "Working with RxJS in Angular for reactive programming questions",
            "level": "Intermediate"
          },
          {
            "id": "angular-syntaxes",
            "title": "Angular Syntaxes",
            "description": "Common Angular syntax patterns and related interview questions",
            "level": "Beginner"
          },
          {
            "id": "angular-cheatsheet",
            "title": "Angular Cheatsheet",
            "description": "Quick reference to essential Angular concepts and syntax",
            "level": "Beginner"
          }
        ]
      },
      {
        "id": "frontend-javascript",
        "title": "JavaScript",
        "description": "Core JavaScript concepts and patterns",
        "level": "All Levels"
      },
      {
        "id": "ts-syntaxes",
        "title": "TypeScript Syntaxes",
        "description": "Common TypeScript syntax patterns and related interview questions",
        "level": "Beginner"
      }
    ]
  },
  {
    "id": "backend",
    "title": "Backend Development",
    "description": "Prepare for backend interviews with questions on server architecture, databases, and API design.",
    "icon": "Database",
    "level": "Advanced",
    "subpaths": [
      {
        "id": "backend-csharp",
        "title": "C#",
        "description": "C# Topics",
        "level": "Beginner",
        "subpaths": [
          {
            "id": "backend-csharp-basic",
            "title": "C# Basics",
            "description": "Fundamentals of C# programming for backend development.",
            "level": "Beginner"
          },
          {
            "id": "csharp-syntaxes",
            "title": "C# Syntaxes",
            "description": "Common C# syntax patterns and related interview questions",
            "level": "Beginner"
          },
          {
            "id": "c-sharp-async",
            "title": "Async Programming",
            "description": "Asynchronous programming with async/await in C#.",
            "level": "Intermediate"
          },
          {
            "id": "backend-csharp-errorhandling",
            "title": "Error Handling",
            "description": "Exception handling and logging practices in C# applications.",
            "level": "Intermediate"
          },
          {
            "id": "backend-csharp-entityframework",
            "title": "Entity Framework",
            "description": "ORM for .NET to work with relational data using domain-specific objects.",
            "level": "Intermediate"
          },
          {
            "id": "backend-solid",
            "title": "SOLID Principles",
            "description": "Object-oriented design principles for maintainable C# code.",
            "level": "Intermediate"
          },
          {
            "id": "backend-csharp-design-patterns",
            "title": "Design Patterns",
            "description": "Common design patterns and their implementation in C#.",
            "level": "Intermediate"
          },
          {
            "id": "backend-csharp-creational-design-patterns",
            "title": "Creational Design Patterns",
            "description": "Patterns for object creation mechanisms in C#.",
            "level": "Intermediate"
          },
          {
            "id": "backend-csharp-behavioral-design-patterns",
            "title": "Behavioral Design Patterns",
            "description": "Design patterns that focus on object interactions and responsibilities.",
            "level": "Intermediate"
          },
          {
            "id": "backend-csharp-structural-design-patterns",
            "title": "Structural Design Patterns",
            "description": "Design patterns that deal with object composition and relationships in C#.",
            "level": "Intermediate"
          },
          {
            "id": "backend-csharp-oops",
            "title": "Object-Oriented Programming (OOP) in C#",
            "description": "Core object-oriented principles in C# including encapsulation, inheritance, polymorphism, and abstraction.",
            "level": "Beginner"
          },
          {
            "id": "csharp-version-comparison",
            "title": "C# 8 vs C# 9 vs C# 10",
            "description": "Compare features, improvements, and differences between C# 8, C# 9, and C# 10 with interview-focused insights",
            "level": "Intermediate"
          },
          {
            "id": "dotnet-version-comparison",
            "title": ".NET Core 3.1 vs .NET 6 vs .NET 8",
            "description": "Explore key differences, enhancements, and migration considerations across major .NET versions",
            "level": "Intermediate"
          },
          {
            "id": "dotnet-core-packages",
            "title": ".NET Core Packages",
            "description": "Useful NuGet packages for rate limiting, retries, and other backend concerns.",
            "level": "Intermediate"
          },
          {
            "id": "backend-dotnet",
            "title": ".NET Ecosystem",
            "description": "Overview of .NET Core and related backend tools and frameworks.",
            "level": "Intermediate"
          },
          {
            "id": "c-sharp-questions",
            "title": "C# Interview Questions",
            "description": "Commonly asked questions in C# interviews with answers.",
            "level": "Intermediate"
          },
          {
            "id": "securing-api",
            "title": "Securing APIs",
            "description": "Techniques for securing APIs using tokens, rate limits, and identity.",
            "level": "Advanced"
          },
          {
            "id": "backend-csharp-advanced",
            "title": "C# Advanced",
            "description": "Advanced C# language features and best practices.",
            "level": "Advanced"
          }
        ]
      },
      {
        "id": "golang",
        "title": "Golang",
        "description": "Go language and ecosystem for backend development",
        "level": "Intermediate",
        "subpaths": [
          {
            "id": "backend-golang",
            "title": "Golang Backend",
            "description": "Golang and ecosystem tools for backend services.",
            "level": "Intermediate"
          },
          {
            "id": "backend-solid-go",
            "title": "Golang Solid Principles",
            "description": "Applying Solid Principles in Golang",
            "level": "Advanced"
          },
          {
            "id": "backend-golang-problem-solving",
            "title": "Golang Problem Solving",
            "description": "Coding challenges and algorithmic solutions using Golang.",
            "level": "Intermediate"
          },
          {
            "id": "go-basics",
            "title": "Golang Basics",
            "description": "Fundamentals of Go language programming, including variables, data types, and syntax.",
            "level": "Beginner"
          },
          {
            "id": "go-oper-and-expressions",
            "title": "Operators and Expressions",
            "description": "Understanding Go's operators, expressions, precedence, and evaluation.",
            "level": "Beginner"
          },
          {
            "id": "go-control-flow",
            "title": "Control Flow in Go",
            "description": "If-else statements, loops, switch cases, and defer-panic-recover mechanisms.",
            "level": "Beginner"
          },
          {
            "id": "go-func-and-methods",
            "title": "Functions and Methods",
            "description": "Understanding function declarations, return values, and methods in Go.",
            "level": "Intermediate"
          },
          {
            "id": "go-data-structures",
            "title": "Go Data Structures",
            "description": "Arrays, slices, maps, structs, and linked lists in Go.",
            "level": "Intermediate"
          },
          {
            "id": "go-interfaces-poly",
            "title": "Interfaces and Polymorphism",
            "description": "Implicit interface implementation, empty interfaces, and type assertions.",
            "level": "Intermediate"
          },
          {
            "id": "go-error-handling",
            "title": "Error Handling in Go",
            "description": "Managing errors using built-in error handling mechanisms and best practices.",
            "level": "Intermediate"
          },
          {
            "id": "go-concurrency",
            "title": "Concurrency in Go",
            "description": "Understanding goroutines, channels, WaitGroups, and concurrency patterns.",
            "level": "Intermediate"
          },
          {
            "id": "go-memory-management",
            "title": "Memory Management in Go",
            "description": "Garbage collection, stack vs heap allocation, and escape analysis.",
            "level": "Advanced"
          },
          {
            "id": "go-module-dependency",
            "title": "Go Modules and Dependencies",
            "description": "Managing dependencies using Go modules and package management best practices.",
            "level": "Intermediate"
          },
          {
            "id": "go-database",
            "title": "Go and Databases",
            "description": "Working with SQL and NoSQL databases, including database/sql and GORM.",
            "level": "Intermediate"
          },
          {
            "id": "go-string-manipulation",
            "title": "String and Byte Manipulation",
            "description": "String operations, byte manipulation, and using the strings package effectively.",
            "level": "Intermediate"
          },
          {
            "id": "go-web-development",
            "title": "Web Development with Go",
            "description": "Building web applications, REST APIs, and working with net/http.",
            "level": "Advanced"
          },
          {
            "id": "go-testing-debugging",
            "title": "Testing and Debugging in Go",
            "description": "Unit testing, benchmarking, and debugging techniques using Go tooling.",
            "level": "Intermediate"
          },
          {
            "id": "go-security-bestpractices",
            "title": "Security Best Practices",
            "description": "Secure coding, input validation, and preventing race conditions in Go.",
            "level": "Advanced"
          },
          {
            "id": "go-advance",
            "title": "Advanced Go Topics",
            "description": "Reflection, generics, unsafe package, and advanced Go optimization techniques.",
            "level": "Advanced"
          },
          {
            "id": "go-open-ended-questions",
            "title": "Go Open-Ended Questions",
            "description": "A collection of thought-provoking questions in Golang that have multiple correct answers, covering concurrency, error handling, and design patterns.",
            "level": "Intermediate"
          },
          {
            "id": "go-syntaxes",
            "title": "Go Syntaxes",
            "description": "Common Go syntax patterns and related interview questions",
            "level": "Beginner"
          }
        ]
      },
      {
        "id": "backend-dotnet",
        "title": "ASP.NET Core",
        "description": ".NET web application framework",
        "level": "Advanced"
      },
      {
        "id": "database",
        "title": "Database",
        "description": "Concepts and technologies related to modern database systems.",
        "level": "Intermediate",
        "subpaths": [
          {
            "id": "azure-cosmos-db",
            "title": "Azure Cosmos DB",
            "description": "A NoSQL database service designed for high availability, global distribution, and low-latency access to data.",
            "level": "Advanced"
          },
          {
            "id": "relational-vs-nosql",
            "title": "Relational vs NoSQL",
            "description": "Comparative analysis between traditional relational databases and modern NoSQL data stores.",
            "level": "Intermediate"
          }
        ]
      }
    ]
  },
  {
    "id": "algorithms",
    "title": "Data Structures & Algorithms",
    "description": "Practice common algorithmic problems and data structures frequently asked in technical interviews.",
    "icon": "GitBranch",
    "level": "All Levels",
    "subpaths": [
      {
        "id": "algorithms-csharp",
        "title": "Algorithms in C#",
        "description": "Solve common algorithmic challenges using C# with interview-oriented solutions.",
        "level": "Intermediate"
      },
      {
        "id": "algorithms-golang",
        "title": "Algorithms in Go",
        "description": "Implement and practice algorithms in Golang for backend interviews and performance.",
        "level": "Intermediate"
      },
      {
        "id": "csharp-datastructures",
        "title": "Data Structures in C#",
        "description": "Master data structure implementations and their applications using C#.",
        "level": "Intermediate"
      },
      {
        "id": "golang-datastructures",
        "title": "Data Structures in Go",
        "description": "Build foundational and advanced data structures using Golang.",
        "level": "Intermediate"
      },
      {
        "id": "two-pointers",
        "title": "Two Pointers Pattern",
        "description": "Solve array and string problems efficiently using the two pointers technique.",
        "level": "Intermediate"
      },
      {
        "id": "binary-search",
        "title": "Binary Search",
        "description": "Master binary search and its variations for sorted data problems.",
        "level": "Intermediate"
      },
      {
        "id": "fast-slow-pointers",
        "title": "Fast and Slow Pointers",
        "description": "Detect cycles and solve problems on linked lists and arrays using the fast and slow pointer technique.",
        "level": "Intermediate"
      },
      {
        "id": "sliding-window",
        "title": "Sliding Window",
        "description": "Tackle substring and subarray problems with optimized sliding window strategies.",
        "level": "Intermediate"
      }
    ]
  },
  {
    "id": "system-design",
    "title": "System Design",
    "description": "Learn how to design scalable systems and tackle complex architectural interview questions.",
    "icon": "architecture",
    "level": "Advanced",
    "subpaths": [
      {
        "id": "system-design-scalability",
        "title": "Scalability",
        "description": "Building systems that scale to millions of users",
        "level": "Advanced"
      },
      {
        "id": "system-design-microservices",
        "title": "Microservices",
        "description": "Microservice architecture patterns and practices",
        "level": "Advanced"
      },
      {
        "id": "system-design-uml",
        "title": "System Design with UML",
        "description": "Learn how to design scalable and efficient systems using UML diagrams",
        "icon": "Architecture",
        "level": "Intermediate",
        "subpaths": [
          {
            "id": "uml-advanced",
            "title": "Advanced UML Concepts",
            "description": "Deep dive into advanced UML techniques and best practices.",
            "icon": "Expert",
            "level": "Advanced"
          },
          {
            "id": "uml-basics",
            "title": "UML Basics",
            "description": "Understand the fundamental concepts of UML and how to use them.",
            "icon": "Book",
            "level": "Beginner"
          },
          {
            "id": "uml-behaviour-diagram",
            "title": "UML Behavioral Diagrams",
            "description": "Learn about UML diagrams that describe the dynamic behavior of a system.",
            "icon": "Flowchart",
            "level": "Intermediate"
          },
          {
            "id": "uml-class-diagram",
            "title": "UML Class Diagrams",
            "description": "Explore how to represent objects, attributes, and relationships in UML.",
            "icon": "Hierarchy",
            "level": "Intermediate"
          },
          {
            "id": "uml-diagrams",
            "title": "Overview of UML Diagrams",
            "description": "Get a comprehensive understanding of different UML diagram types.",
            "icon": "Diagram",
            "level": "Beginner"
          },
          {
            "id": "uml-interaction-diagram",
            "title": "UML Interaction Diagrams",
            "description": "Study how objects interact through sequence and communication diagrams.",
            "icon": "Interaction",
            "level": "Intermediate"
          },
          {
            "id": "uml-structure-diagram",
            "title": "UML Structure Diagrams",
            "description": "Learn how to model the static aspects of a system using UML structure diagrams.",
            "icon": "Blueprint",
            "level": "Intermediate"
          }
        ]
      }
    ]
  },
  {
    "id": "message-broker",
    "title": "Message Brokers",
    "description": "Learn about message brokers, their architecture, and how they enable efficient asynchronous communication in distributed systems.",
    "icon": "Server",
    "level": "All Levels",
    "subpaths": [
      {
        "id": "message-broker-basics",
        "title": "Message Broker Fundamentals",
        "description": "Understand the basics of message brokers, their purpose, and key terminologies like producers, consumers, queues, and topics.",
        "level": "Beginner"
      },
      {
        "id": "message-broker-rabbitmq",
        "title": "RabbitMQ",
        "description": "Learn how to set up and use RabbitMQ for message queuing with different exchange types and routing mechanisms.",
        "level": "Intermediate"
      },
      {
        "id": "message-broker-kafka",
        "title": "Apache Kafka",
        "description": "Explore Kafka's architecture, how to produce and consume messages, and work with Kafka topics, partitions, and brokers.",
        "level": "Intermediate"
      },
      {
        "id": "message-broker-advanced",
        "title": "Advanced Message Broker Concepts",
        "description": "Deep dive into distributed messaging patterns, message durability, fault tolerance, and scaling message brokers.",
        "level": "Advanced"
      }
    ]
  },
  {
    "id": "cheatsheets",
    "title": "Cheatsheets",
    "description": "Collection of cheatsheets for various development topics",
    "icon": "Server",
    "level": "All Levels",
    "subpaths": [
      {
        "id": "backend",
        "title": "Backend Development",
        "description": "Prepare for backend interviews with questions on server architecture, databases, and API design.",
        "icon": "Server",
        "level": "Advanced",
        "subpaths": [
          {
            "id": "backend-csharp",
            "title": "C#",
            "description": "C# Topics",
            "level": "Beginner",
            "subpaths": [
              {
                "id": "backend-csharp-basic",
                "title": "C# Basic",
                "description": "Basic C# language features and .NET framework",
                "level": "Beginner"
              },
              {
                "id": "backend-csharp-advanced",
                "title": "C# Advanced",
                "description": "Advanced C# language features and .NET framework",
                "level": "Advanced"
              },
              {
                "id": "backend-csharp-errorhandling",
                "title": "C# Error Handling",
                "description": "C# error handling concepts and techniques",
                "level": "Advanced"
              }
            ]
          }
        ]
      },
      {
        "id": "frontend",
        "title": "Frontend Development",
        "description": "Cheatsheets for JavaScript, React, Vue, and frontend frameworks.",
        "icon": "Monitor",
        "level": "Intermediate",
        "subpaths": [
          {
            "id": "frontend-javascript",
            "title": "JavaScript",
            "description": "JavaScript concepts and best practices",
            "level": "Beginner"
          },
          {
            "id": "frontend-react",
            "title": "React",
            "description": "React fundamentals, hooks, and advanced concepts",
            "level": "Intermediate"
          }
        ]
      },
      {
        "id": "cloud",
        "title": "Cloud Computing",
        "description": "AWS, Azure, Google Cloud, and DevOps concepts.",
        "icon": "Cloud",
        "level": "Advanced",
        "subpaths": [
          {
            "id": "cloud-aws",
            "title": "AWS",
            "description": "Amazon Web Services concepts and best practices",
            "level": "Intermediate"
          },
          {
            "id": "cloud-docker",
            "title": "Docker & Kubernetes",
            "description": "Containerization and orchestration",
            "level": "Advanced"
          }
        ]
      }
    ]
  },
  {
    "id": "job-roles",
    "title": "Job Roles",
    "description": "Collections of Questions based on Job Roles",
    "icon": "Briefcase",
    "level": "Advanced",
    "subpaths": [
      {
        "id": "full-stack",
        "title": "Full Stack Developer",
        "description": "Master both frontend and backend technologies to become a Full Stack Developer",
        "icon": "Globe",
        "level": "Intermediate"
      },
      {
        "id": "frontend-developer",
        "title": "Frontend Developer",
        "description": "Prepare for a career as a Frontend Developer",
        "icon": "Code",
        "level": "Intermediate"
      },
      {
        "id": "backend-developer",
        "title": "Backend Developer",
        "description": "Prepare for a role as a Backend Developer, mastering server-side logic and database management.",
        "icon": "Database",
        "level": "Intermediate"
      },
      {
        "id": "tech-lead",
        "title": "Technical Lead Software Development",
        "description": "Prepare for Technical Lead in Software Development",
        "icon": "Server",
        "level": "Advanced"
      },
      {
        "id": "cloud-architect",
        "title": "Software and Cloud Architect",
        "description": "Prepare for a role as a Software and Cloud Architect with expertise in designing scalable and resilient systems.",
        "icon": "Cloud",
        "level": "Expert"
      },
      {
        "id": "software-architect",
        "title": "Software Architect",
        "description": "Prepare for the role of Software Architect by mastering system design, scalability, and technical leadership.",
        "icon": "Architecture",
        "level": "Expert"
      }
    ]
  },
  {
    "id": "azure",
    "title": "Azure",
    "description": "Microsoft Azure cloud platform services and architecture",
    "level": "Intermediate",
    "subpaths": [
      {
        "id": "api-management",
        "title": "API Management",
        "description": "Manage, secure, and publish APIs with Azure API Management.",
        "level": "Intermediate"
      },
      {
        "id": "azure-cosmos-db",
        "title": "Azure Cosmos DB",
        "description": "Globally distributed NoSQL database service with multi-model support and high scalability.",
        "level": "Advanced"
      }
    ]
  }
]
