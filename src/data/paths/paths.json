[
  {
    "id": "example-path",
    "title": "Example Path with All Content Types",
    "description": "This path demonstrates all content types available in the app, including text, code, lists, tables, images, quotes, and notes.",
    "icon": "FileText",
    "level": "Beginner"
  },
  {
    "id": "frontend",
    "title": "Frontend Development",
    "description": "Master essential frontend interview questions covering HTML, CSS, JavaScript, and popular frameworks.",
    "icon": "Monitor",
    "level": "Intermediate",
    "subpaths": [
      {
        "id": "frontend-html",
        "title": "HTML",
        "description": "HTML interview questions and answers",
        "level": "Intermediate"
      },
      {
        "id": "frontend-react",
        "title": "React",
        "description": "React framework interview questions and answers",
        "level": "Intermediate",
        "subpaths": [
          {
            "id": "react-basic",
            "title": "React Basics",
            "description": "React Basics",
            "level": "Basic"
          },
          {
            "id": "frontend-react-hooks",
            "title": "React Hooks",
            "description": "Understanding React hooks and their applications",
            "level": "Intermediate"
          },
          {
            "id": "frontend-react-state",
            "title": "State Management",
            "description": "Various state management approaches in React",
            "level": "Advanced"
          },
          {
            "id": "frontend-react-patterns",
            "title": "Design Patterns",
            "description": "Common React design patterns and best practices",
            "level": "Advanced"
          }
        ]
      },
      {
        "id": "frontend-javascript",
        "title": "JavaScript",
        "description": "Core JavaScript concepts and patterns",
        "level": "All Levels"
      }
    ]
  },
  {
    "id": "backend",
    "title": "Backend Development",
    "description": "Prepare for backend interviews with questions on server architecture, databases, and API design.",
    "icon": "Database",
    "level": "Advanced",
    "subpaths": [
      {
        "id": "backend-csharp",
        "title": "C#",
        "description": "C# Topics",
        "level": "Beginner",
        "subpaths": [
          {
            "id": "backend-csharp-basic",
            "title": "C# Basic",
            "description": "Basic C# language features and .NET framework",
            "level": "Beginner"
          },
          {
            "id": "c-sharp-async",
            "title": "C# Async",
            "description": "C# Async Programming",
            "level": "Beginner"
          },
          {
            "id": "backend-csharp-advanced",
            "title": "C# Advanced",
            "description": "Advanced C# language features and .NET framework",
            "level": "Advanced"
          },
          {
            "id": "backend-csharp-errorhandling",
            "title": "C# Error Handling",
            "description": "C# error handling concepts and techniques",
            "level": "Advanced"
          },
          {
            "id": "backend-solid",
            "title": "SOLID Principles",
            "description": "SOLID principles in C# and Golang",
            "level": "Advanced"
          },
          {
            "id": "backend-csharp-design-patterns",
            "title": "C# Design Patterns",
            "description": "Common design patterns in C# development",
            "level": "Advanced"
          }
        ]
      },
      {
        "id": "backend-golang",
        "title": "Golang",
        "description": "Go language and ecosystem for backend development",
        "level": "Intermediate",
        "subpaths": [
          {
            "id": "go-basics",
            "title": "Golang Basics",
            "description": "Fundamentals of Go language programming, including variables, data types, and syntax.",
            "level": "Beginner"
          },
          {
            "id": "go-oper-and-expressions",
            "title": "Operators and Expressions",
            "description": "Understanding Go's operators, expressions, precedence, and evaluation.",
            "level": "Beginner"
          },
          {
            "id": "go-control-flow",
            "title": "Control Flow in Go",
            "description": "If-else statements, loops, switch cases, and defer-panic-recover mechanisms.",
            "level": "Beginner"
          },
          {
            "id": "go-func-and-methods",
            "title": "Functions and Methods",
            "description": "Understanding function declarations, return values, and methods in Go.",
            "level": "Intermediate"
          },
          {
            "id": "go-data-structures",
            "title": "Go Data Structures",
            "description": "Arrays, slices, maps, structs, and linked lists in Go.",
            "level": "Intermediate"
          },
          {
            "id": "go-interfaces-poly",
            "title": "Interfaces and Polymorphism",
            "description": "Implicit interface implementation, empty interfaces, and type assertions.",
            "level": "Intermediate"
          },
          {
            "id": "go-error-handling",
            "title": "Error Handling in Go",
            "description": "Managing errors using built-in error handling mechanisms and best practices.",
            "level": "Intermediate"
          },
          {
            "id": "go-routines",
            "title": "Concurrency in Go",
            "description": "Understanding goroutines, channels, WaitGroups, and concurrency patterns.",
            "level": "Intermediate"
          },
          {
            "id": "go-memory-management",
            "title": "Memory Management in Go",
            "description": "Garbage collection, stack vs heap allocation, and escape analysis.",
            "level": "Advanced"
          },
          {
            "id": "go-module-dependency",
            "title": "Go Modules and Dependencies",
            "description": "Managing dependencies using Go modules and package management best practices.",
            "level": "Intermediate"
          },
          {
            "id": "go-database",
            "title": "Go and Databases",
            "description": "Working with SQL and NoSQL databases, including database/sql and GORM.",
            "level": "Intermediate"
          },
          {
            "id": "go-string-manipulation",
            "title": "String and Byte Manipulation",
            "description": "String operations, byte manipulation, and using the strings package effectively.",
            "level": "Intermediate"
          },
          {
            "id": "go-web-development",
            "title": "Web Development with Go",
            "description": "Building web applications, REST APIs, and working with net/http.",
            "level": "Advanced"
          },
          {
            "id": "go-testing-debugging",
            "title": "Testing and Debugging in Go",
            "description": "Unit testing, benchmarking, and debugging techniques using Go tooling.",
            "level": "Intermediate"
          },
          {
            "id": "go-security-bestpractices",
            "title": "Security Best Practices",
            "description": "Secure coding, input validation, and preventing race conditions in Go.",
            "level": "Advanced"
          },
          {
            "id": "go-advance",
            "title": "Advanced Go Topics",
            "description": "Reflection, generics, unsafe package, and advanced Go optimization techniques.",
            "level": "Advanced"
          },
          {
            "id": "go-open-ended-questions",
            "title": "Go Open-Ended Questions",
            "description": "A collection of thought-provoking questions in Golang that have multiple correct answers, covering concurrency, error handling, and design patterns.",
            "level": "Intermediate"
          }
        ]
      },
      {
        "id": "backend-dotnet",
        "title": "ASP.NET Core",
        "description": ".NET web application framework",
        "level": "Advanced"
      }
    ]
  },
  {
    "id": "algorithms",
    "title": "Data Structures & Algorithms",
    "description": "Practice common algorithmic problems and data structures frequently asked in technical interviews.",
    "icon": "GitBranch",
    "level": "All Levels",
    "subpaths": [
      {
        "id": "algorithms-arrays",
        "title": "Arrays & Strings",
        "description": "Common array and string manipulation problems",
        "level": "Beginner"
      },
      {
        "id": "algorithms-graphs",
        "title": "Graphs & Trees",
        "description": "Tree and graph traversal algorithms",
        "level": "Intermediate"
      },
      {
        "id": "algorithms-dynamic",
        "title": "Dynamic Programming",
        "description": "Dynamic programming concepts and problems",
        "level": "Advanced"
      }
    ]
  },
  {
    "id": "system-design",
    "title": "System Design",
    "description": "Learn how to design scalable systems and tackle complex architectural interview questions.",
    "icon": "architecture",
    "level": "Advanced",
    "subpaths": [
      {
        "id": "system-design-scalability",
        "title": "Scalability",
        "description": "Building systems that scale to millions of users",
        "level": "Advanced"
      },
      {
        "id": "system-design-microservices",
        "title": "Microservices",
        "description": "Microservice architecture patterns and practices",
        "level": "Advanced"
      },
      {
        "id": "system-design-uml",
        "title": "System Design with UML",
        "description": "Learn how to design scalable and efficient systems using UML diagrams",
        "icon": "Architecture",
        "level": "Intermediate"
      }
    ]
  },
  {
    "id": "message-broker",
    "title": "Message Brokers",
    "description": "Learn about message brokers, their architecture, and how they enable efficient asynchronous communication in distributed systems.",
    "icon": "Server",
    "level": "All Levels",
    "subpaths": [
      {
        "id": "message-broker-basics",
        "title": "Message Broker Fundamentals",
        "description": "Understand the basics of message brokers, their purpose, and key terminologies like producers, consumers, queues, and topics.",
        "level": "Beginner"
      },
      {
        "id": "message-broker-rabbitmq",
        "title": "RabbitMQ",
        "description": "Learn how to set up and use RabbitMQ for message queuing with different exchange types and routing mechanisms.",
        "level": "Intermediate"
      },
      {
        "id": "message-broker-kafka",
        "title": "Apache Kafka",
        "description": "Explore Kafka's architecture, how to produce and consume messages, and work with Kafka topics, partitions, and brokers.",
        "level": "Intermediate"
      },
      {
        "id": "message-broker-advanced",
        "title": "Advanced Message Broker Concepts",
        "description": "Deep dive into distributed messaging patterns, message durability, fault tolerance, and scaling message brokers.",
        "level": "Advanced"
      }
    ]
  },
  {
    "id": "cheatsheets",
    "title": "Cheatsheets",
    "description": "Collection of cheatsheets for various development topics",
    "icon": "Server",
    "level": "All Levels",
    "subpaths": [
      {
        "id": "backend",
        "title": "Backend Development",
        "description": "Prepare for backend interviews with questions on server architecture, databases, and API design.",
        "icon": "Server",
        "level": "Advanced",
        "subpaths": [
          {
            "id": "backend-csharp",
            "title": "C#",
            "description": "C# Topics",
            "level": "Beginner",
            "subpaths": [
              {
                "id": "backend-csharp-basic",
                "title": "C# Basic",
                "description": "Basic C# language features and .NET framework",
                "level": "Beginner"
              },
              {
                "id": "backend-csharp-advanced",
                "title": "C# Advanced",
                "description": "Advanced C# language features and .NET framework",
                "level": "Advanced"
              },
              {
                "id": "backend-csharp-errorhandling",
                "title": "C# Error Handling",
                "description": "C# error handling concepts and techniques",
                "level": "Advanced"
              }
            ]
          },
          {
            "id": "backend-golang",
            "title": "Golang",
            "description": "Go language and ecosystem for backend development",
            "level": "Intermediate",
            "subpaths": [
              {
                "id": "backend-golang-basics",
                "title": "Golang Basics",
                "description": "Fundamentals of Go language programming",
                "level": "Beginner"
              },
              {
                "id": "backend-golang-concurrency",
                "title": "Concurrency",
                "description": "Go goroutines, channels, and concurrency patterns",
                "level": "Intermediate"
              }
            ]
          }
        ]
      },
      {
        "id": "frontend",
        "title": "Frontend Development",
        "description": "Cheatsheets for JavaScript, React, Vue, and frontend frameworks.",
        "icon": "Monitor",
        "level": "Intermediate",
        "subpaths": [
          {
            "id": "frontend-javascript",
            "title": "JavaScript",
            "description": "JavaScript concepts and best practices",
            "level": "Beginner"
          },
          {
            "id": "frontend-react",
            "title": "React",
            "description": "React fundamentals, hooks, and advanced concepts",
            "level": "Intermediate"
          }
        ]
      },
      {
        "id": "cloud",
        "title": "Cloud Computing",
        "description": "AWS, Azure, Google Cloud, and DevOps concepts.",
        "icon": "Cloud",
        "level": "Advanced",
        "subpaths": [
          {
            "id": "cloud-aws",
            "title": "AWS",
            "description": "Amazon Web Services concepts and best practices",
            "level": "Intermediate"
          },
          {
            "id": "cloud-docker",
            "title": "Docker & Kubernetes",
            "description": "Containerization and orchestration",
            "level": "Advanced"
          }
        ]
      }
    ]
  },
  {
    "id": "job-roles",
    "title": "Job Roles",
    "description": "Collections of Questions based on Job Roles",
    "icon": "Briefcase",
    "level": "Advanced",
    "subpaths": [
      {
        "id": "full-stack",
        "title": "Full Stack Developer",
        "description": "Master both frontend and backend technologies to become a Full Stack Developer",
        "icon": "Globe",
        "level": "Intermediate"
      },
      {
        "id": "frontend-developer",
        "title": "Frontend Developer",
        "description": "Prepare for a career as a Frontend Developer",
        "icon": "Code",
        "level": "Intermediate"
      },
      {
        "id": "backend-developer",
        "title": "Backend Developer",
        "description": "Prepare for a role as a Backend Developer, mastering server-side logic and database management.",
        "icon": "Database",
        "level": "Intermediate"
      },
      {
        "id": "tech-lead",
        "title": "Technical Lead Software Development",
        "description": "Prepare for Technical Lead in Software Development",
        "icon": "Server",
        "level": "Advanced"
      },
      {
        "id": "cloud-architect",
        "title": "Software and Cloud Architect",
        "description": "Prepare for a role as a Software and Cloud Architect with expertise in designing scalable and resilient systems.",
        "icon": "Cloud",
        "level": "Expert"
      },
      {
        "id": "software-architect",
        "title": "Software Architect",
        "description": "Prepare for the role of Software Architect by mastering system design, scalability, and technical leadership.",
        "icon": "Architecture",
        "level": "Expert"
      }
    ]
  }
]
